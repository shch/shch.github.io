{"meta":{"title":"大前端说","subtitle":"","description":"","author":"shch","url":"http://example.com","root":"/"},"pages":[{"title":"关于","date":"2020-10-07T01:16:23.680Z","updated":"2020-10-07T01:16:23.680Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"分享关于大前端的所有有意思的话题，包括web，移动端。欢迎加我微信 meetbc，一起交流"}],"posts":[{"title":"FabricJS使用小结 -- 初步认识","slug":"FabricJS使用小结-初步认识","date":"2020-10-07T01:22:11.000Z","updated":"2020-10-08T14:14:04.430Z","comments":true,"path":"/FabricJS使用小结-初步认识/","link":"","permalink":"http://example.com/FabricJS%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93-%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/","excerpt":"","text":"简介什么是 Fabric.jsFabric.js是一个可以简化Canvas程序编写的库。Canvas提供一个好的画布能力, 但是Api不够友好。绘制简单图形其实还可以, 不过做一些复杂的图形绘制, 编写一些复杂的效果，就不是那么方便了。Fabric.js就是为此而开发，它主要就是用对象的方式去编写代码。 举例传统的画正方形代码1234567891011&#x2F;&#x2F; reference canvas element (with id&#x3D;&quot;c&quot;)var canvasEl &#x3D; document.getElementById(&#39;c&#39;);&#x2F;&#x2F; get 2d context to draw on (the &quot;bitmap&quot; mentioned earlier)var ctx &#x3D; canvasEl.getContext(&#39;2d&#39;);&#x2F;&#x2F; set fill color of contextctx.fillStyle &#x3D; &#39;red&#39;;&#x2F;&#x2F; create rectangle at a 100,100 point, with 20x20 dimensionsctx.fillRect(100, 100, 20, 20); Fabric的方式画1234567891011121314&#x2F;&#x2F; create a wrapper around native canvas element (with id&#x3D;&quot;c&quot;)var canvas &#x3D; new fabric.Canvas(&#39;c&#39;);&#x2F;&#x2F; create a rectangle objectvar rect &#x3D; new fabric.Rect(&#123; left: 100, top: 100, fill: &#39;red&#39;, width: 20, height: 20&#125;);&#x2F;&#x2F; &quot;add&quot; rectangle onto canvascanvas.add(rect); 试着旋转一下角度 传统的123ctx.translate(100, 100);ctx.rotate(Math.PI &#x2F; 180 * 45);ctx.fillRect(-10, -10, 20, 20); Fabric的12345678910111213var canvas &#x3D; new fabric.Canvas(&#39;c&#39;);&#x2F;&#x2F; create a rectangle with angle&#x3D;45var rect &#x3D; new fabric.Rect(&#123; left: 100, top: 100, fill: &#39;red&#39;, width: 20, height: 20, angle: 45&#125;);canvas.add(rect); 如果我们想重新调整位置 传统的123&#x2F;&#x2F; erase entire canvas areactx.clearRect(0, 0, canvasEl.width, canvasEl.height);ctx.fillRect(20, 50, 20, 20); Fabric的12rect.set(&#123; left: 20, top: 50 &#125;);canvas.renderAll(); objects fabric.Circle fabric.Ellipse fabric.Line fabric.Polygon fabric.Polyline fabric.Rect fabric.Triangle 画一个三角形 和一个 圆形 1234567891011&#x2F;&#x2F; create a wrapper around native canvas element (with id&#x3D;&quot;c&quot;)var canvas &#x3D; new fabric.Canvas(&#39;c&#39;);var circle &#x3D; new fabric.Circle(&#123; radius: 20, fill: &#39;green&#39;, left: 100, top: 100&#125;);var triangle &#x3D; new fabric.Triangle(&#123; width: 20, height: 30, fill: &#39;blue&#39;, left: 50, top: 50&#125;);canvas.add(circle, triangle); Manipulating objects【操作】可以简单的使用set来控制对象属性 positioning — left, top; dimension — width, height; rendering — fill, opacity, stroke, strokeWidth; scaling and rotation — scaleX, scaleY, angle; and even those related to flipping — flipX, flipY. 123rect.set(&#39;fill&#39;, &#39;red&#39;);rect.set(&#123; strokeWidth: 5, stroke: &#39;rgba(100,200,200,0.5)&#39; &#125;);rect.set(&#39;angle&#39;, 15).set(&#39;flipY&#39;, true); 参考 官网地址 联系我库使用过程有什么问题，可以跟我沟通，加我的wx:meetbc。欢迎交流关于前端的任何话题。","categories":[],"tags":[{"name":"FabricJS","slug":"FabricJS","permalink":"http://example.com/tags/FabricJS/"}]}],"categories":[],"tags":[{"name":"FabricJS","slug":"FabricJS","permalink":"http://example.com/tags/FabricJS/"}]}