<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大前端说</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-10-08T14:07:20.062Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>shch</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FabricJS使用小结 -- 初步认识</title>
    <link href="http://example.com/FabricJS%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93-%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/"/>
    <id>http://example.com/FabricJS%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93-%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/</id>
    <published>2020-10-07T01:22:11.000Z</published>
    <updated>2020-10-08T14:07:20.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是-Fabric-js"><a href="#什么是-Fabric-js" class="headerlink" title="什么是 Fabric.js"></a>什么是 Fabric.js</h3><p>Fabric.js是一个可以简化Canvas程序编写的库。Canvas提供一个好的画布能力, 但是Api不够友好。绘制简单图形其实还可以, 不过做一些复杂的图形绘制, 编写一些复杂的效果，就不是那么方便了。Fabric.js就是为此而开发，它主要就是用对象的方式去编写代码。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>####传统的画正方形代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; reference canvas element (with id&#x3D;&quot;c&quot;)</span><br><span class="line">var canvasEl &#x3D; document.getElementById(&#39;c&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; get 2d context to draw on (the &quot;bitmap&quot; mentioned earlier)</span><br><span class="line">var ctx &#x3D; canvasEl.getContext(&#39;2d&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; set fill color of context</span><br><span class="line">ctx.fillStyle &#x3D; &#39;red&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; create rectangle at a 100,100 point, with 20x20 dimensions</span><br><span class="line">ctx.fillRect(100, 100, 20, 20);</span><br></pre></td></tr></table></figure><h4 id="Fabric的方式画"><a href="#Fabric的方式画" class="headerlink" title="Fabric的方式画"></a>Fabric的方式画</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; create a wrapper around native canvas element (with id&#x3D;&quot;c&quot;)</span><br><span class="line">var canvas &#x3D; new fabric.Canvas(&#39;c&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; create a rectangle object</span><br><span class="line">var rect &#x3D; new fabric.Rect(&#123;</span><br><span class="line">  left: 100,</span><br><span class="line">  top: 100,</span><br><span class="line">  fill: &#39;red&#39;,</span><br><span class="line">  width: 20,</span><br><span class="line">  height: 20</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; &quot;add&quot; rectangle onto canvas</span><br><span class="line">canvas.add(rect);</span><br></pre></td></tr></table></figure><p>试着旋转一下角度</p><p>####传统的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.translate(100, 100);</span><br><span class="line">ctx.rotate(Math.PI &#x2F; 180 * 45);</span><br><span class="line">ctx.fillRect(-10, -10, 20, 20);</span><br></pre></td></tr></table></figure><h4 id="Fabric的"><a href="#Fabric的" class="headerlink" title="Fabric的"></a>Fabric的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var canvas &#x3D; new fabric.Canvas(&#39;c&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; create a rectangle with angle&#x3D;45</span><br><span class="line">var rect &#x3D; new fabric.Rect(&#123;</span><br><span class="line">  left: 100,</span><br><span class="line">  top: 100,</span><br><span class="line">  fill: &#39;red&#39;,</span><br><span class="line">  width: 20,</span><br><span class="line">  height: 20,</span><br><span class="line">  angle: 45</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">canvas.add(rect);</span><br></pre></td></tr></table></figure><p>如果我们想重新调整位置 </p><p>####传统的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; erase entire canvas area</span><br><span class="line">ctx.clearRect(0, 0, canvasEl.width, canvasEl.height);</span><br><span class="line">ctx.fillRect(20, 50, 20, 20);</span><br></pre></td></tr></table></figure><h4 id="Fabric的-1"><a href="#Fabric的-1" class="headerlink" title="Fabric的"></a>Fabric的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rect.set(&#123; left: 20, top: 50 &#125;);</span><br><span class="line">canvas.renderAll();</span><br></pre></td></tr></table></figure><h3 id="objects"><a href="#objects" class="headerlink" title="objects"></a>objects</h3><ol><li>fabric.Circle</li><li>fabric.Ellipse</li><li>fabric.Line</li><li>fabric.Polygon</li><li>fabric.Polyline</li><li>fabric.Rect</li><li>fabric.Triangle </li></ol><p>画一个三角形 和一个 圆形</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; create a wrapper around native canvas element (with id&#x3D;&quot;c&quot;)</span><br><span class="line">var canvas &#x3D; new fabric.Canvas(&#39;c&#39;);</span><br><span class="line"></span><br><span class="line">var circle &#x3D; new fabric.Circle(&#123;</span><br><span class="line">    radius: 20, fill: &#39;green&#39;, left: 100, top: 100</span><br><span class="line">&#125;);</span><br><span class="line">var triangle &#x3D; new fabric.Triangle(&#123;</span><br><span class="line">    width: 20, height: 30, fill: &#39;blue&#39;, left: 50, top: 50</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">canvas.add(circle, triangle);</span><br></pre></td></tr></table></figure><h3 id="Manipulating-objects【操作】"><a href="#Manipulating-objects【操作】" class="headerlink" title="Manipulating objects【操作】"></a>Manipulating objects【操作】</h3><p>可以简单的使用set来控制对象属性</p><ol><li>positioning — left, top;</li><li>dimension — width, height;</li><li>rendering — fill, opacity, stroke, strokeWidth;</li><li>scaling and rotation — scaleX, scaleY, angle;</li><li>and even those related to flipping — flipX, flipY.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rect.set(&#39;fill&#39;, &#39;red&#39;);</span><br><span class="line">rect.set(&#123; strokeWidth: 5, stroke: &#39;rgba(100,200,200,0.5)&#39; &#125;);</span><br><span class="line">rect.set(&#39;angle&#39;, 15).set(&#39;flipY&#39;, true);</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="http://fabricjs.com/">官网地址</a>  </li></ol><h3 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h3><p>库使用过程有什么问题，可以跟我沟通，加我的wx:meetbc。欢迎交流关于前端的任何话题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;h3 id=&quot;什么是-Fabric-js&quot;&gt;&lt;a href=&quot;#什么是-Fabric-js&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="FabricJS" scheme="http://example.com/tags/FabricJS/"/>
    
  </entry>
  
</feed>
